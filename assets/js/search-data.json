{
  
    
        "post0": {
            "title": "An analysis of `clamp_with_grad()`",
            "content": "The standard clamp() (AKA clip()) function has a zero gradient outside the clamped region. This is a problem for gradient descent optimizers. . Various people have proposed a fix for this: adding a new function with a pseudo-gradient. I understood the general idea of this, but not the specified, so set out to build some intuition about how the backward pass is defined and why the function works. . What I discovered, however, was that this approach has a limitation: the gradient remains zero for negative values. . Fortunately it&#39;s pretty easy to fix. I suggest an alternative definition which patches this, and demonstrate that we see improved behaviour. . Setup . Import the usual libraries and tweak the matplotlib setup . import torch import matplotlib import matplotlib.pyplot as plt from math import pi FIGSIZE = 6 matplotlib.rcParams[&#39;figure.figsize&#39;] = (FIGSIZE * 3, FIGSIZE) . Plotting the derivative . To look at the derivative, we define a helper function to compute the gradient at a point. . def get_gradient(f, xs): xs = xs.detach().clone() xs.requires_grad = True ys = f(xs) ys.backward(torch.ones_like(ys)) return xs.grad.detach() x = torch.arange(-2, 2, 0.01) plt.plot(x, torch.sin(x * 5), label=&quot;sin(x)&quot;) plt.plot(x, get_gradient(torch.sin, x * 5), label=&quot;dsin(x)/dx&quot;) plt.legend() plt.show() . The problem . The standard clamp functions has a zero gradient outside the clamped region. As a result gradient descent can&#39;t do anything useful. . def plot(clamp_fn, ax, title): x = torch.arange(-2, 2, 0.01) clamp = lambda x: clamp_fn(x, -1, 1) loss = lambda x: torch.sin(clamp(x) * pi) + 1 ax.plot(x, clamp(x), label=&quot;clamp&quot;, alpha=0.5) ax.plot(x, loss(x), label=&quot;loss&quot;, alpha=0.5) ax.plot(x, get_gradient(loss, x), label=&quot;dloss/dx&quot;, alpha=0.5) ax.legend() ax.title.set_text(title) fig, ax = plt.subplots(ncols=1, figsize=(FIGSIZE,FIGSIZE)) plot(torch.clamp, ax, &quot;clamp&quot;) . In this simple example, the minimum of the loss function (orange line) is at -0.5. . However outside the $[-1,1]$ interval, the derivative of the loss function (green line) is zero. . Define clamp_with_grad() . Various folks have proposed the following approach to addressing this, by providing a pseudo-derivative outside the clamped interval: . class ClampWithGrad(torch.autograd.Function): @staticmethod def forward(ctx, input, min, max): ctx.min = min ctx.max = max ctx.save_for_backward(input) return input.clamp(min, max) @staticmethod def backward(ctx, grad_in): input, = ctx.saved_tensors return ( grad_in * (grad_in * (input - input.clamp(ctx.min, ctx.max)) &gt;= 0), None, None, ) clamp_with_grad = ClampWithGrad.apply . fig, ax = plt.subplots(ncols=2, figsize=(FIGSIZE*2, FIGSIZE)) plot(torch.clamp, ax[0], &quot;clamp&quot;) plot(clamp_with_grad, ax[1], &quot;clamp_with_grad&quot;) . An improved function . class ClampWithGradProposed(torch.autograd.Function): @staticmethod def forward(ctx, input, min, max): ctx.min = min ctx.max = max ctx.save_for_backward(input) return input.clamp(min, max) @staticmethod def backward(ctx, grad_in): input, = ctx.saved_tensors clamped = input.clamp(ctx.min, ctx.max) delta = input - clamped v = torch.where(delta == 0, grad_in, torch.sign(delta)) return (v, None, None) clamp_with_grad2 = ClampWithGrad2.apply . fig, ax = plt.subplots(ncols=3) plot(torch.clamp, ax[0], &quot;clamp&quot;) plot(clamp_with_grad, ax[1], &quot;clamp_with_grad&quot;) plot(clamp_with_grad2, ax[2], &quot;clamp_with_grad_proposed&quot;) .",
            "url": "https://www.joehalliwell.com/blog/2022/01/01/clamp-with-grad.html",
            "relUrl": "/2022/01/01/clamp-with-grad.html",
            "date": " • Jan 1, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Stationery Day",
            "content": "After the success of last year’s Tradition Inventing Day, it’s time again to devise a fixture for my calendar. . Celebrate Stationery Day by covering your desk in squares of yellow paper. Each square of yellow paper must be inscribed with the rune TAX. . Celebrate Stationery Day by buying a notebook that you’ll never fill. Stationery is the cenotaph for our literary ambitions. . Celebrate Stationery Day by asking your friends, “What’s mightier than the sword?” Your friends must then shout, “THE PEN IS,” or perform a forfeit. . Stationery Day falls on the Friday after Easter. . Image: Father Tim Jones was outraged in a local stationary store. Photo credit: Ross Parry/York Press .",
            "url": "https://www.joehalliwell.com/blog/moveable-feast/tradition/2016/02/18/stationery-day.html",
            "relUrl": "/moveable-feast/tradition/2016/02/18/stationery-day.html",
            "date": " • Feb 18, 2016"
        }
        
    
  
    
        ,"post2": {
            "title": "Tradition Inventing Day",
            "content": "Feeling slightly cheated by missing Shrove (AKA Pancake) Tuesday for the fourth or fifth year in a row, I’ve decided to take matters into my own hands. . Each year on the 18th of February I will invent a new festival day . The appointed date will take its rightful place in the calendar and be celebrated in the appointed way from that moment until the end of time. . Please join me in celebrating today, Tradition Inventing Day. .",
            "url": "https://www.joehalliwell.com/blog/tradition/2015/02/18/tradition-inventing-day.html",
            "relUrl": "/tradition/2015/02/18/tradition-inventing-day.html",
            "date": " • Feb 18, 2015"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://www.joehalliwell.com/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://www.joehalliwell.com/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}