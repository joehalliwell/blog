[
  {
    "objectID": "posts/holiday-books/index.html",
    "href": "posts/holiday-books/index.html",
    "title": "Holiday books",
    "section": "",
    "text": "I’ve been reading Species of Spaces and Other Pieces a collection of Georges Perec’s writing this week. It’s a perfect holiday book. It’s full of things to read and things to do. It’s a grown-up version of the summer annuals (Whizzer & Chips) I used to read in the car on the way to Pwllheli."
  },
  {
    "objectID": "posts/holiday-books/index.html#postcards",
    "href": "posts/holiday-books/index.html#postcards",
    "title": "Holiday books",
    "section": "243 Postcards",
    "text": "243 Postcards\nOne piece is called “Two Hundred and Fourty-three Postcards in Real Colour”. Dedicated to Italo Calvino; the title evokes JG Ballard. It is the combined text of 243 holiday postcards. This should be terribly boring, but by some sleight of hand it’s not. Here are the first five as a taster:\n!(great-mosque-of-kairouan-postcard.png)\n\nWe’re camping near Ajaccio. Lovely weather. We eat well. I’ve got sunburnt. Fondest love.\nWe’re at the Hôtel Alcazar. Getting a tan. Really nice! We’ve made loads of friends. Back on the 7th.\nWe’re sailing off L’Ile-Rousse. Getting ourselves a tan. Food admirable. I’ve gone and got sunburnt! Love etc.\nWe’ve just done Dahomey. Superb nights. Fantastic swimming. Excursions on camel-back. Will be in Paris on the 15th.\nWe’ve finally landed in Nice. Lots of lazing about and sleep. Really nice (despite the sunburn). Love.\n\nPostcards are ridden with clichés, but Perec’s holiday-makers know that and circumlocute them, finding syncopated ways to say the same old things. The effect is disruptive and wholly convincing. Darlings, I do it myself.\nPostcards are formulaic. Knowing a little of Perec, I suspect we’re looking at an exhaustive catalogue here. 243 = 3 * 3 * 3 * 3 * 3. Perhaps these texts represent 5 decisions, each with 3 choices.\nPerhaps not. But the sense that a formula might be at play is irresistible: this feels like a system of co-ordinates. And that suspicion of regularity hyper-sensitises us to variation. Every phrase becomes a hook.\nAlone, each message is banal. Gridded together they become terribly poignant: telegraphic!"
  },
  {
    "objectID": "posts/holiday-books/index.html#collage",
    "href": "posts/holiday-books/index.html#collage",
    "title": "Holiday books",
    "section": "Collage",
    "text": "Collage\nCombinatorics crop up again in the essay (of sorts) “Think/Classify”. It’s a collage piece: a handful of elegant paragraphs with little in common. Sure they’re about thinking. But what isn’t?\nCollage is a gentle, therapeutic art form. I’ve always been suspicious of it.\nThings — any things, even several copies of the same thing — go together. The choice can be arbitrary at least in so far as we’re capable of that. Things agree with one another and contradict one another to the same degree. It seems lazy.\nPaul Auster‘s strength, someone wrote is that “he simply rubs stories together like pebbles. They clatter, spark, and echo with a deepening mystery.” That phrase caught my ear. There’s profundity in setting things up together and (thereby) calling attention to the arrangement."
  },
  {
    "objectID": "posts/holiday-books/index.html#aphorism",
    "href": "posts/holiday-books/index.html#aphorism",
    "title": "Holiday books",
    "section": "Aphorism",
    "text": "Aphorism\nI am suspicious of surrealism. Dali and Magritte are too slick. I prefer the muddy ones: Ernst, Carrington etc.\nOne of Perec’s fellow OuLiPo-eans, Marcel Benabou invented a “machine” for producing Aphorisms. Like a language it has grammar and vocabulary. Sets of abstract nouns, preferably weighty ones, make up the vocabulary: war/peace, knowledge/science, morality/art etc. The grammar consists of template phrases: “A, like B, is largely a matter of taste”, “A wouldn’t be A, were it not for B”, “The true name of A is B” etc.\nI’ve made a web page that lets you explore a corner of this space: Aphorism Generator.\n“Where is the thinking here?” asks Perec. “In the formula? In the vocabulary? In the operation that marries them?” It’s in our heads, obviously."
  },
  {
    "objectID": "posts/holiday-books/index.html#peregrination",
    "href": "posts/holiday-books/index.html#peregrination",
    "title": "Holiday books",
    "section": "Peregrination",
    "text": "Peregrination\nIt shouldn’t be a surprise that I’m not the first to make a computer simulate Benabou’s machine. Computers are combiners par excellence. Perec tells us that Paul Buffort wrote a program that could turn out “a good dozen [aphorisms] within a few seconds”. This is a charming reminder of how far we’ve come. Modern machines can generate aphorisms at a rate of knots.\n\nThey are playing a game. They are playing at not playing a game. If I show them I see they are, I shall break the rules and they will punish me. I must play their game, of not seeing I see the game. – Knots, RD Laing\n\nIn the introduction to Knots (incidentally another excellent holiday book) Laing writes that the patterns to which he’ll call attention could have been presented as “raw data” — presumably transcripts — or further distilled “towards an abstract logico-mathematical calculus”.\nPerhaps Laing was just being lazy. Or perhaps he knew that calculi can be stone cold boring. If there is a single thread to Knots, far better to show a few colourful examples of it. Or maybe Knots is a a salad. The Latin for salad, “satura”, is sometimes thought the ancestor of “satire”. I’ve never been convinced by that one.\nOne person who did have a taste for abstraction was Early Wittgenstein. At the end of his Tractatus he famously says, “whereof we cannot speak, thereof we must be silent.”\n(I really don’t know what Laing was after with “logico-mathematical”.)\nWhereas big on archaisms, Late Wittgenstein got especially big on “shewing”. Shewing is something that you can do in silence, instead of speaking. The problem is roughly that there are certain things — thing that don’t exist, generally speaking — that can’t be talked about without missing the mark. This resulted in a very great number of little notes which were arranged into books after his death like pressed flowers.\nThe Wittgensteins are the most important philosophers of the Twentieth century.\nA lot of Perec’s pieces don’t really have a proper ending."
  },
  {
    "objectID": "posts/stationery-day/index.html",
    "href": "posts/stationery-day/index.html",
    "title": "Stationery Day",
    "section": "",
    "text": "Father Tim Jones was outraged in a local stationary store. Photo credit: Ross Parry/York Press\n\n\nAfter the success of last year’s Tradition Inventing Day, it’s time again to devise a fixture for my calendar.\nCelebrate Stationery Day by covering your desk in squares of yellow paper. Each square of yellow paper must be inscribed with the rune TAX.\nCelebrate Stationery Day by buying a notebook that you’ll never fill. Stationery is the cenotaph for our literary ambitions.\nCelebrate Stationery Day by asking your friends, “What’s mightier than the sword?” Your friends must then shout, “THE PEN IS,” or perform a forfeit.\nStationery Day falls on the Friday after Easter."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Joe Halliwell",
    "section": "",
    "text": "Renovating the command line\n\n\n\n\n\n\nrust\n\n\nunix\n\n\ntools\n\n\n\n\n\n\n\n\n\nSep 10, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nAn analysis of clamp_with_grad()\n\n\n\n\n\n\npytorch\n\n\n\n\n\n\n\n\n\nJan 1, 2022\n\n\n\n\n\n\n\n\n\n\n\n\nStationery Day\n\n\n\n\n\n\nmoveable feast\n\n\ntradition inventing day\n\n\n\n\n\n\n\n\n\nFeb 18, 2016\n\n\n\n\n\n\n\n\n\n\n\n\nTradition Inventing Day\n\n\n\n\n\n\ntradition inventing day\n\n\n\n\n\n\n\n\n\nFeb 18, 2015\n\n\n\n\n\n\n\n\n\n\n\n\nHoliday books\n\n\n\n\n\n\nreview\n\n\nperec\n\n\nwittgenstein\n\n\n\n\n\n\n\n\n\nJul 14, 2010\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/clamp-with-grad.html",
    "href": "posts/clamp-with-grad.html",
    "title": "An analysis of clamp_with_grad()",
    "section": "",
    "text": "This notebook examines the clamp_with_grad() function that’s sometimes used in the CLIP-guided art community.\nThe standard clamp() (AKA clip()) function has a zero gradient outside the clamped region. This is a problem for gradient descent optimizers.\nVarious people have proposed a fix for this: adding a new function with a pseudo-gradient. I understood the general idea of this, but not the specified, so set out to build some intuition about how the backward pass is defined and why the function works.\nWhat I discovered, however, was that this approach has a limitation: the gradient remains zero for negative values.\nFortunately it’s pretty easy to fix. I suggest an alternative definition which patches this, and demonstrate that we see improved behaviour."
  },
  {
    "objectID": "posts/clamp-with-grad.html#setup",
    "href": "posts/clamp-with-grad.html#setup",
    "title": "An analysis of clamp_with_grad()",
    "section": "Setup",
    "text": "Setup\nImport the usual libraries and tweak the matplotlib setup\n\nimport torch\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom math import pi\n\nFIGSIZE = 6\nmatplotlib.rcParams['figure.figsize'] = (FIGSIZE * 3, FIGSIZE)"
  },
  {
    "objectID": "posts/clamp-with-grad.html#plotting-the-derivative",
    "href": "posts/clamp-with-grad.html#plotting-the-derivative",
    "title": "An analysis of clamp_with_grad()",
    "section": "Plotting the derivative",
    "text": "Plotting the derivative\nTo look at the derivative, we define a helper function to compute the gradient at a point.\n\ndef get_gradient(f, xs):\n  xs = xs.detach().clone()\n  xs.requires_grad = True\n\n  ys = f(xs)\n  ys.backward(torch.ones_like(ys))  \n  return xs.grad.detach()\n\n\nx = torch.arange(-2, 2, 0.01)\n\nplt.plot(x, torch.sin(x * 5), label=\"sin(x)\")\nplt.plot(x, get_gradient(torch.sin, x * 5), label=\"dsin(x)/dx\")\nplt.legend()\nplt.show()"
  },
  {
    "objectID": "posts/clamp-with-grad.html#the-problem",
    "href": "posts/clamp-with-grad.html#the-problem",
    "title": "An analysis of clamp_with_grad()",
    "section": "The problem",
    "text": "The problem\nThe standard clamp functions has a zero gradient outside the clamped region. As a result gradient descent can’t do anything useful.\n\ndef plot(clamp_fn, ax, title):\n  x = torch.arange(-2, 2, 0.01)\n  clamp = lambda x: clamp_fn(x, -1, 1)\n  loss = lambda x: torch.sin(clamp(x) * pi) + 1\n\n  ax.plot(x, clamp(x), label=\"clamp\", alpha=0.5)\n  ax.plot(x, loss(x), label=\"loss\", alpha=0.5)\n  ax.plot(x, get_gradient(loss, x), label=\"dloss/dx\", alpha=0.5)\n    \n  ax.legend()\n  ax.title.set_text(title)\n\nfig, ax = plt.subplots(ncols=1, figsize=(FIGSIZE,FIGSIZE))\nplot(torch.clamp, ax, \"clamp\")\n\n\n\n\n\n\n\n\nIn this simple example, the minimum of the loss function (orange line) is at -0.5.\nHowever outside the \\([-1,1]\\) interval, the derivative of the loss function (green line) is zero."
  },
  {
    "objectID": "posts/clamp-with-grad.html#define-clamp_with_grad",
    "href": "posts/clamp-with-grad.html#define-clamp_with_grad",
    "title": "An analysis of clamp_with_grad()",
    "section": "Define clamp_with_grad()",
    "text": "Define clamp_with_grad()\nVarious folks have proposed the following approach to addressing this, by providing a pseudo-derivative outside the clamped interval:\n\nclass ClampWithGrad(torch.autograd.Function):\n    @staticmethod\n    def forward(ctx, input, min, max):\n        ctx.min = min\n        ctx.max = max\n        ctx.save_for_backward(input)\n        return input.clamp(min, max)\n\n    @staticmethod\n    def backward(ctx, grad_in):\n        input, = ctx.saved_tensors\n        return (\n            grad_in * (grad_in * (input - input.clamp(ctx.min, ctx.max)) &gt;= 0),\n            None,\n            None,\n        )\n\nclamp_with_grad = ClampWithGrad.apply\n\n\nfig, ax = plt.subplots(ncols=2, figsize=(FIGSIZE*2, FIGSIZE))\nplot(torch.clamp, ax[0], \"clamp\")\nplot(clamp_with_grad, ax[1], \"clamp_with_grad\")"
  },
  {
    "objectID": "posts/rust-tools/index.html",
    "href": "posts/rust-tools/index.html",
    "title": "Renovating the command line",
    "section": "",
    "text": "Many of the UNIX command line tools we use day-to-day date back to the earliest incarnations of UNIX at AT&T in 1970s. Of course, these days we’re mostly using GNU versions1, published under free software licenses and sporting various useful extensions.\nHowever these don’t represent much of an evolution of the ancient tools, but rather a respectful effort to conserve them.\nIn the last decade, Rust, a modern systems programming language has begun to displace2 that other UNIX stalwart, the C programming language. It’s maybe not surprising then, that there are many excellent Rust alternatives to the hoary old GNU tools.\nIn my .bash_aliases, exa has now replaced ls, and cat has yielded to bat. Below, you’ll find six Rust-based command line tools that are now part of my every day carry."
  },
  {
    "objectID": "posts/rust-tools/index.html#exa-ls-with-flair",
    "href": "posts/rust-tools/index.html#exa-ls-with-flair",
    "title": "Renovating the command line",
    "section": "Exa: ls with flair",
    "text": "Exa: ls with flair\nexa is more or less a drop-in replacement for ls with sensible defaults like human-readable file sizes and colour-coding for different file types.\nIt has first-class support for creation/modification/access times and extended filesystem attributes. When integrated with git, exa even indicates the version control status of each file.\nAlso, if you’re using a nerd font it has icons. Everyone loves that.\n\n\n\nSample output from exa showing more colour and detail than ls provides"
  },
  {
    "objectID": "posts/rust-tools/index.html#bat-colourful-cat",
    "href": "posts/rust-tools/index.html#bat-colourful-cat",
    "title": "Renovating the command line",
    "section": "Bat: colourful cat",
    "text": "Bat: colourful cat\ncat is one of the oldest Unix utilities, dating back to Version 1 Unix. Yes, I nearly always have an editor open, yes less is more suited to long files, and yet I routinely find myself using cat to peek at files.\nbat is a drop-in replacement that behaves like cat in scripts, but adds user-friendly paging, syntax highlighting, git integration and line numbers when outputting to a terminal. Much better.\n\n\n\nBat"
  },
  {
    "objectID": "posts/rust-tools/index.html#starship-fast-and-fancy-prompt",
    "href": "posts/rust-tools/index.html#starship-fast-and-fancy-prompt",
    "title": "Renovating the command line",
    "section": "Starship: fast and fancy prompt",
    "text": "Starship: fast and fancy prompt\nDid you ever install some giant shell config framework just to get a cute prompt?\nStarship is a cross-platform prompt, that takes its aesthetic cues and customizability from Zsh’s Spaceship prompt but eclipses it in raw speed. There’s never that clunky pause as hundreds of lines of script are executed just to generate your prompt.\nStarship’s support for customization is inevitably somewhat limited. But its config is simple and declarative and eliminates the need for tweaking complex scripts and baroque environment variables.\nThe default setup looks great – but I’ve added extra nerdfont bling.\n\n\n\nStarship showing the currently active prompt elements and associated profiling information"
  },
  {
    "objectID": "posts/rust-tools/index.html#dust-du-but-useful",
    "href": "posts/rust-tools/index.html#dust-du-but-useful",
    "title": "Renovating the command line",
    "section": "Dust: du but useful",
    "text": "Dust: du but useful\nIf you’re using du you’re almost certaininly trying to figure out why you’ve run out of disk space. So you’re already annoyed, and it’s about to get worse.\ndu will give you raw data on file sizes to work with but you’re going to have to muck around with advanced flags and probably do some scripting to get your answer.\nIn contrast dust presents information in a visually intuitive tree structure, making it easy to see which files or directories are taking up space. It’s also faster.\n\n\n\nDust making it abundantly clear that Steam is to blame for that npm install failure"
  },
  {
    "objectID": "posts/rust-tools/index.html#fd-find-but-usable",
    "href": "posts/rust-tools/index.html#fd-find-but-usable",
    "title": "Renovating the command line",
    "section": "Fd: find but usable",
    "text": "Fd: find but usable\nfind is notorious for its arcane syntax and sluggishness on large filesystems. fd is a fast and user-friendly alternative whose simple syntax and smart defaults priortize common use cases without losing flexibility. And again it’s damn fast."
  },
  {
    "objectID": "posts/rust-tools/index.html#cargo-install-and-update-rust-tools",
    "href": "posts/rust-tools/index.html#cargo-install-and-update-rust-tools",
    "title": "Renovating the command line",
    "section": "Cargo: install and update rust tools",
    "text": "Cargo: install and update rust tools\nIf you’re interested in trying the above tools, it’s easy to get started with Rust.\nThe standard installer will give you a full set of dev tools including cargo, which is Rust’s package manager and swiss army knife.\nCargo can be used to install all of the programs above: a simple ‘cargo install $tool’ fetches, compiles, and places them on your path.\ncargo-update is a cargo extension that detects outdated packages and updates them in one go. This keeps your toolset not just functional, but cutting-edge.\n\n\n\nCargo update"
  },
  {
    "objectID": "posts/rust-tools/index.html#closing-thoughts",
    "href": "posts/rust-tools/index.html#closing-thoughts",
    "title": "Renovating the command line",
    "section": "Closing thoughts",
    "text": "Closing thoughts\nThe Rust CLI tool ecosystem is flourishing. In this post, I covered some tools that I use every day, but there are tons of great Rust command line apps that I use less frequently3. You might also want to check out:\n3 You can see some of these in the cargo install-update shot above\nbottom: cute, cross-platform system monitor\nbroot: TUI filesystem navigator with sophisticated preview capabilities\njust: project-specific command runner &emdash; like make but without the baggage\nripgrep: fast content search with an intuitive interface\ntokei: fast alternative to sloccount for counting lines of code"
  },
  {
    "objectID": "posts/rust-tools/index.html#colophon",
    "href": "posts/rust-tools/index.html#colophon",
    "title": "Renovating the command line",
    "section": "Colophon",
    "text": "Colophon\nAll screengrabs are from gnome terminal using the Wild Cherry theme from Gogh. The font is FantasqueSansMono NerdFont."
  },
  {
    "objectID": "posts/tradition-inventing-day/index.html",
    "href": "posts/tradition-inventing-day/index.html",
    "title": "Tradition Inventing Day",
    "section": "",
    "text": "Feeling slightly cheated by missing Shrove (AKA Pancake) Tuesday for the fourth or fifth year in a row, I’ve decided to take matters into my own hands.\nEach year on the 18th of February I will invent a new festival day . The appointed date will take its rightful place in the calendar and be celebrated in the appointed way from that moment until the end of time.\nPlease join me in celebrating today, Tradition Inventing Day.\n\n\n\nA traditional greeting card for Tradition Inventing Day"
  }
]