[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/clamp-with-grad.html",
    "href": "posts/clamp-with-grad.html",
    "title": "An analysis of clamp_with_grad()",
    "section": "",
    "text": "This notebook examines the clamp_with_grad() function that’s sometimes used in the CLIP-guided art community.\nThe standard clamp() (AKA clip()) function has a zero gradient outside the clamped region. This is a problem for gradient descent optimizers.\nVarious people have proposed a fix for this: adding a new function with a pseudo-gradient. I understood the general idea of this, but not the specified, so set out to build some intuition about how the backward pass is defined and why the function works.\nWhat I discovered, however, was that this approach has a limitation: the gradient remains zero for negative values.\nFortunately it’s pretty easy to fix. I suggest an alternative definition which patches this, and demonstrate that we see improved behaviour."
  },
  {
    "objectID": "posts/clamp-with-grad.html#setup",
    "href": "posts/clamp-with-grad.html#setup",
    "title": "An analysis of clamp_with_grad()",
    "section": "Setup",
    "text": "Setup\nImport the usual libraries and tweak the matplotlib setup\n\nimport torch\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom math import pi\n\nFIGSIZE = 6\nmatplotlib.rcParams['figure.figsize'] = (FIGSIZE * 3, FIGSIZE)"
  },
  {
    "objectID": "posts/clamp-with-grad.html#plotting-the-derivative",
    "href": "posts/clamp-with-grad.html#plotting-the-derivative",
    "title": "An analysis of clamp_with_grad()",
    "section": "Plotting the derivative",
    "text": "Plotting the derivative\nTo look at the derivative, we define a helper function to compute the gradient at a point.\n\ndef get_gradient(f, xs):\n  xs = xs.detach().clone()\n  xs.requires_grad = True\n\n  ys = f(xs)\n  ys.backward(torch.ones_like(ys))  \n  return xs.grad.detach()\n\n\nx = torch.arange(-2, 2, 0.01)\n\nplt.plot(x, torch.sin(x * 5), label=\"sin(x)\")\nplt.plot(x, get_gradient(torch.sin, x * 5), label=\"dsin(x)/dx\")\nplt.legend()\nplt.show()"
  },
  {
    "objectID": "posts/clamp-with-grad.html#the-problem",
    "href": "posts/clamp-with-grad.html#the-problem",
    "title": "An analysis of clamp_with_grad()",
    "section": "The problem",
    "text": "The problem\nThe standard clamp functions has a zero gradient outside the clamped region. As a result gradient descent can’t do anything useful.\n\ndef plot(clamp_fn, ax, title):\n  x = torch.arange(-2, 2, 0.01)\n  clamp = lambda x: clamp_fn(x, -1, 1)\n  loss = lambda x: torch.sin(clamp(x) * pi) + 1\n\n  ax.plot(x, clamp(x), label=\"clamp\", alpha=0.5)\n  ax.plot(x, loss(x), label=\"loss\", alpha=0.5)\n  ax.plot(x, get_gradient(loss, x), label=\"dloss/dx\", alpha=0.5)\n    \n  ax.legend()\n  ax.title.set_text(title)\n\nfig, ax = plt.subplots(ncols=1, figsize=(FIGSIZE,FIGSIZE))\nplot(torch.clamp, ax, \"clamp\")\n\n\n\n\nIn this simple example, the minimum of the loss function (orange line) is at -0.5.\nHowever outside the \\([-1,1]\\) interval, the derivative of the loss function (green line) is zero."
  },
  {
    "objectID": "posts/clamp-with-grad.html#define-clamp_with_grad",
    "href": "posts/clamp-with-grad.html#define-clamp_with_grad",
    "title": "An analysis of clamp_with_grad()",
    "section": "Define clamp_with_grad()",
    "text": "Define clamp_with_grad()\nVarious folks have proposed the following approach to addressing this, by providing a pseudo-derivative outside the clamped interval:\n\nclass ClampWithGrad(torch.autograd.Function):\n    @staticmethod\n    def forward(ctx, input, min, max):\n        ctx.min = min\n        ctx.max = max\n        ctx.save_for_backward(input)\n        return input.clamp(min, max)\n\n    @staticmethod\n    def backward(ctx, grad_in):\n        input, = ctx.saved_tensors\n        return (\n            grad_in * (grad_in * (input - input.clamp(ctx.min, ctx.max)) &gt;= 0),\n            None,\n            None,\n        )\n\nclamp_with_grad = ClampWithGrad.apply\n\n\nfig, ax = plt.subplots(ncols=2, figsize=(FIGSIZE*2, FIGSIZE))\nplot(torch.clamp, ax[0], \"clamp\")\nplot(clamp_with_grad, ax[1], \"clamp_with_grad\")"
  },
  {
    "objectID": "posts/tradition-inventing-day/tradition-inventing-day.html",
    "href": "posts/tradition-inventing-day/tradition-inventing-day.html",
    "title": "Tradition Inventing Day",
    "section": "",
    "text": "Feeling slightly cheated by missing Shrove (AKA Pancake) Tuesday for the fourth or fifth year in a row, I’ve decided to take matters into my own hands.\nEach year on the 18th of February I will invent a new festival day . The appointed date will take its rightful place in the calendar and be celebrated in the appointed way from that moment until the end of time.\nPlease join me in celebrating today, Tradition Inventing Day.\n\n\n\nA traditional greeting card for Tradition Inventing Day"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Joe Halliwell",
    "section": "",
    "text": "Rust CLI tools\n\n\n\n\n\n\n\nrust\n\n\ntools\n\n\n\n\n\n\n\n\n\n\n\nFeb 7, 2023\n\n\n\n\n\n\n  \n\n\n\n\nAn analysis of clamp_with_grad()\n\n\n\n\n\n\n\npytorch\n\n\n\n\n\n\n\n\n\n\n\nJan 1, 2022\n\n\n\n\n\n\n  \n\n\n\n\nStationery Day\n\n\n\n\n\n\n\nmoveable-feast\n\n\ntradition\n\n\n\n\n\n\n\n\n\n\n\nFeb 18, 2016\n\n\n\n\n\n\n  \n\n\n\n\nTradition Inventing Day\n\n\n\n\n\n\n\ntradition\n\n\n\n\n\n\n\n\n\n\n\nFeb 18, 2015\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/rust-tools/index.html",
    "href": "posts/rust-tools/index.html",
    "title": "Rust CLI tools",
    "section": "",
    "text": "The success of Rust as a systems programming language has tempted a lot of folks to revisit the traditional UNIX tools ecosystem.\nHere are six tools that made my .bashrc."
  },
  {
    "objectID": "posts/rust-tools/index.html#cargo-update",
    "href": "posts/rust-tools/index.html#cargo-update",
    "title": "Rust CLI tools",
    "section": "Cargo update",
    "text": "Cargo update\n\n\n\nCargo install update"
  },
  {
    "objectID": "posts/rust-tools/index.html#starship",
    "href": "posts/rust-tools/index.html#starship",
    "title": "Rust CLI tools",
    "section": "Starship",
    "text": "Starship\n\n\n\nStarship"
  },
  {
    "objectID": "posts/rust-tools/index.html#exa",
    "href": "posts/rust-tools/index.html#exa",
    "title": "Rust CLI tools",
    "section": "Exa",
    "text": "Exa\n\n\n\nExa"
  },
  {
    "objectID": "posts/rust-tools/index.html#broot",
    "href": "posts/rust-tools/index.html#broot",
    "title": "Rust CLI tools",
    "section": "Broot",
    "text": "Broot\n\n\n\nBroot"
  },
  {
    "objectID": "posts/rust-tools/index.html#dust",
    "href": "posts/rust-tools/index.html#dust",
    "title": "Rust CLI tools",
    "section": "Dust",
    "text": "Dust\n\n\n\nDust"
  },
  {
    "objectID": "posts/rust-tools/index.html#bat",
    "href": "posts/rust-tools/index.html#bat",
    "title": "Rust CLI tools",
    "section": "Bat",
    "text": "Bat\n\n\n\nBat"
  },
  {
    "objectID": "posts/stationery-day/stationery-day.html",
    "href": "posts/stationery-day/stationery-day.html",
    "title": "Stationery Day",
    "section": "",
    "text": "Father Tim Jones was outraged in a local stationary store. Photo credit: Ross Parry/York Press\n\n\nAfter the success of last year’s Tradition Inventing Day, it’s time again to devise a fixture for my calendar.\nCelebrate Stationery Day by covering your desk in squares of yellow paper. Each square of yellow paper must be inscribed with the rune TAX.\nCelebrate Stationery Day by buying a notebook that you’ll never fill. Stationery is the cenotaph for our literary ambitions.\nCelebrate Stationery Day by asking your friends, “What’s mightier than the sword?” Your friends must then shout, “THE PEN IS,” or perform a forfeit.\nStationery Day falls on the Friday after Easter."
  }
]